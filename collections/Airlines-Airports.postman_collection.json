{
	"info": {
		"_postman_id": "9fa1b37b-b23d-4c7a-aa75-0cd54fa78a9f",
		"name": "Airlines-Airports",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16818530"
	},
	"item": [
		{
			"name": "Create airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"airline_id\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Avianca\",\n    \"description\": \"Aerolínea representativa de Colombia\",\n    \"foundationDate\": \"1994-11-16T00:00:00.000Z\" ,\n    \"webpage\": \"www.avianca.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/airlines",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create airport 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"airport_id_1\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"El Dorado\",\n    \"code\": \"DRD\",\n    \"country\": \"Colombia\" ,\n    \"city\": \"Bogotá\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/airports",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create airport 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"airport_id_2\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Aepuerto CDMX\",\n    \"code\": \"MXC\",\n    \"country\": \"Mexico\" ,\n    \"city\": \"Ciudad de México\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/airports",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add an Airport to an Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/airlines/{{airline_id}}/airports/{{airport_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines",
						"{{airline_id}}",
						"airports",
						"{{airport_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add an invalid Airport to an Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/airlines/{{airline_id}}/airports/{{invalid_uuid}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines",
						"{{airline_id}}",
						"airports",
						"{{invalid_uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Airport of an Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/airlines/{{airline_id}}/airports/{{airport_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines",
						"{{airline_id}}",
						"airports",
						"{{airport_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an Airport not associated to an Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The airport with the given id is not associated to the airline\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/airlines/{{airline_id}}/airports/{{airport_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines",
						"{{airline_id}}",
						"airports",
						"{{airport_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Airports of an Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/airlines/{{airline_id}}/airports",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines",
						"{{airline_id}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Airports of an Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"{{airport_id_1}}\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/airlines/{{airline_id}}/airports",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines",
						"{{airline_id}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update invalid Airports of an Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"{{invalid_uuid}}\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/airlines/{{airline_id}}/airports",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines",
						"{{airline_id}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Airport of an Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/airlines/{{airline_id}}/airports/{{airport_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines",
						"{{airline_id}}",
						"airports",
						"{{airport_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Airport not associated to the Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The airport with the given id is not associated to the airline\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/airlines/{{airline_id}}/airports/{{airport_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airlines",
						"{{airline_id}}",
						"airports",
						"{{airport_id_2}}"
					]
				}
			},
			"response": []
		}
	]
}